/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SMS model module.
 * @module model/SMS
 * @version 2.0.0
 */
class SMS {
    /**
     * Constructs a new <code>SMS</code>.
     * SMS message content
     * @alias module:model/SMS
     * @param text {String} Text content of the SMS
     */
    constructor(text) { 
        
        SMS.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['text'] = text;
    }

    /**
     * Constructs a <code>SMS</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SMS} obj Optional instance to populate.
     * @return {module:model/SMS} The populated <code>SMS</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SMS();

            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = ApiClient.convertToType(data['validity'], 'Number');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('autoconvert')) {
                obj['autoconvert'] = ApiClient.convertToType(data['autoconvert'], 'String');
            }
            if (data.hasOwnProperty('udh')) {
                obj['udh'] = ApiClient.convertToType(data['udh'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SMS</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SMS</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SMS.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is a string
        if (data['autoconvert'] && !(typeof data['autoconvert'] === 'string' || data['autoconvert'] instanceof String)) {
            throw new Error("Expected the field `autoconvert` to be a primitive type in the JSON string but got " + data['autoconvert']);
        }
        // ensure the json data is a string
        if (data['udh'] && !(typeof data['udh'] === 'string' || data['udh'] instanceof String)) {
            throw new Error("Expected the field `udh` to be a primitive type in the JSON string but got " + data['udh']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }

        return true;
    }


}

SMS.RequiredProperties = ["text"];

/**
 * Text content of the SMS
 * @member {String} text
 */
SMS.prototype['text'] = undefined;

/**
 * Phone number or alphanumeric sender name
 * @member {String} sender
 */
SMS.prototype['sender'] = undefined;

/**
 * After how many minutes this channel is considered as failed and the next channel is attempted.                     Only one of \"ttl\" and \"validity\" can be used.
 * @member {Number} validity
 */
SMS.prototype['validity'] = undefined;

/**
 * After how many seconds this channel is considered as failed and the next channel is attempted.                     Only one of \"ttl\" and \"validity\" can be used.
 * @member {Number} ttl
 */
SMS.prototype['ttl'] = undefined;

/**
 * Defines how non-GSM characters will be treated:    - \"on\" Use replacement settings from the account's [API Auto Replace settings page](https://dashboard.messente.com/api-settings/auto-replace) (default)   - \"full\" All non GSM 03.38 characters will be replaced with suitable alternatives   - \"off\" Message content is not modified in any way
 * @member {module:model/SMS.AutoconvertEnum} autoconvert
 */
SMS.prototype['autoconvert'] = undefined;

/**
 * hex-encoded string containing SMS UDH
 * @member {String} udh
 */
SMS.prototype['udh'] = undefined;

/**
 * The channel used to deliver the message
 * @member {module:model/SMS.ChannelEnum} channel
 * @default 'sms'
 */
SMS.prototype['channel'] = 'sms';





/**
 * Allowed values for the <code>autoconvert</code> property.
 * @enum {String}
 * @readonly
 */
SMS['AutoconvertEnum'] = {

    /**
     * value: "full"
     * @const
     */
    "full": "full",

    /**
     * value: "on"
     * @const
     */
    "on": "on",

    /**
     * value: "off"
     * @const
     */
    "off": "off"
};


/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
SMS['ChannelEnum'] = {

    /**
     * value: "sms"
     * @const
     */
    "sms": "sms"
};



export default SMS;

