/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WhatsAppTemplate from './WhatsAppTemplate';

/**
 * The WhatsApp model module.
 * @module model/WhatsApp
 * @version 2.2.0
 */
class WhatsApp {
    /**
     * Constructs a new <code>WhatsApp</code>.
     * WhatsApp message content.   Only one of \&quot;text\&quot;, \&quot;image\&quot;, \&quot;document\&quot; or \&quot;audio\&quot; can be provided
     * @alias module:model/WhatsApp
     */
    constructor() { 
        
        WhatsApp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WhatsApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WhatsApp} obj Optional instance to populate.
     * @return {module:model/WhatsApp} The populated <code>WhatsApp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WhatsApp();

            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = ApiClient.convertToType(data['validity'], 'Number');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = WhatsAppTemplate.constructFromObject(data['template']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WhatsApp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WhatsApp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // validate the optional field `template`
        if (data['template']) { // data not null
          WhatsAppTemplate.validateJSON(data['template']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }

        return true;
    }


}



/**
 * Phone number or alphanumeric sender name
 * @member {String} sender
 */
WhatsApp.prototype['sender'] = undefined;

/**
 * After how many minutes this channel is   considered as failed and the next channel is attempted
 * @member {Number} validity
 */
WhatsApp.prototype['validity'] = undefined;

/**
 * After how many seconds this channel is considered as failed and the next channel is attempted.       Only one of \"ttl\" and \"validity\" can be used.
 * @member {Number} ttl
 */
WhatsApp.prototype['ttl'] = undefined;

/**
 * @member {module:model/WhatsAppTemplate} template
 */
WhatsApp.prototype['template'] = undefined;

/**
 * The channel used to deliver the message
 * @member {module:model/WhatsApp.ChannelEnum} channel
 * @default 'whatsapp'
 */
WhatsApp.prototype['channel'] = 'whatsapp';





/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
WhatsApp['ChannelEnum'] = {

    /**
     * value: "whatsapp"
     * @const
     */
    "whatsapp": "whatsapp"
};



export default WhatsApp;

