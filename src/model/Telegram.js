/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Telegram model module.
 * @module model/Telegram
 * @version 2.0.0
 */
class Telegram {
    /**
     * Constructs a new <code>Telegram</code>.
     * Telegram message content
     * @alias module:model/Telegram
     */
    constructor() { 
        
        Telegram.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Telegram</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Telegram} obj Optional instance to populate.
     * @return {module:model/Telegram} The populated <code>Telegram</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Telegram();

            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
            if (data.hasOwnProperty('validity')) {
                obj['validity'] = ApiClient.convertToType(data['validity'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('document_url')) {
                obj['document_url'] = ApiClient.convertToType(data['document_url'], 'String');
            }
            if (data.hasOwnProperty('audio_url')) {
                obj['audio_url'] = ApiClient.convertToType(data['audio_url'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Telegram</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Telegram</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['document_url'] && !(typeof data['document_url'] === 'string' || data['document_url'] instanceof String)) {
            throw new Error("Expected the field `document_url` to be a primitive type in the JSON string but got " + data['document_url']);
        }
        // ensure the json data is a string
        if (data['audio_url'] && !(typeof data['audio_url'] === 'string' || data['audio_url'] instanceof String)) {
            throw new Error("Expected the field `audio_url` to be a primitive type in the JSON string but got " + data['audio_url']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }

        return true;
    }


}



/**
 * Phone number or alphanumeric sender name
 * @member {String} sender
 */
Telegram.prototype['sender'] = undefined;

/**
 * After how many minutes this channel is considered as failed and the next channel is attempted
 * @member {Number} validity
 */
Telegram.prototype['validity'] = undefined;

/**
 * Plaintext content for Telegram
 * @member {String} text
 */
Telegram.prototype['text'] = undefined;

/**
 * URL for the embedded image. Mutually exclusive with \"document_url\" and \"audio_url\"
 * @member {String} image_url
 */
Telegram.prototype['image_url'] = undefined;

/**
 * URL for the embedded image. Mutually exclusive with \"audio_url\" and \"image_url\"
 * @member {String} document_url
 */
Telegram.prototype['document_url'] = undefined;

/**
 * URL for the embedded image. Mutually exclusive with \"document_url\" and \"image_url\"
 * @member {String} audio_url
 */
Telegram.prototype['audio_url'] = undefined;

/**
 * The channel used to deliver the message
 * @member {module:model/Telegram.ChannelEnum} channel
 * @default 'telegram'
 */
Telegram.prototype['channel'] = 'telegram';





/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
Telegram['ChannelEnum'] = {

    /**
     * value: "telegram"
     * @const
     */
    "telegram": "telegram"
};



export default Telegram;

