/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Channel from './Channel';
import ErrorCodeOmnichannelMachine from './ErrorCodeOmnichannelMachine';
import PriceInfo from './PriceInfo';
import Status from './Status';

/**
 * The DeliveryResult model module.
 * @module model/DeliveryResult
 * @version 2.1.0
 */
class DeliveryResult {
    /**
     * Constructs a new <code>DeliveryResult</code>.
     * A delivery report
     * @alias module:model/DeliveryResult
     */
    constructor() { 
        
        DeliveryResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeliveryResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeliveryResult} obj Optional instance to populate.
     * @return {module:model/DeliveryResult} The populated <code>DeliveryResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeliveryResult();

            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = Channel.constructFromObject(data['channel']);
            }
            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('err')) {
                obj['err'] = ErrorCodeOmnichannelMachine.constructFromObject(data['err']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('price_info')) {
                obj['price_info'] = PriceInfo.constructFromObject(data['price_info']);
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ApiClient.convertToType(data['sender'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeliveryResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeliveryResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message_id'] && !(typeof data['message_id'] === 'string' || data['message_id'] instanceof String)) {
            throw new Error("Expected the field `message_id` to be a primitive type in the JSON string but got " + data['message_id']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // validate the optional field `price_info`
        if (data['price_info']) { // data not null
          PriceInfo.validateJSON(data['price_info']);
        }
        // ensure the json data is a string
        if (data['sender'] && !(typeof data['sender'] === 'string' || data['sender'] instanceof String)) {
            throw new Error("Expected the field `sender` to be a primitive type in the JSON string but got " + data['sender']);
        }

        return true;
    }


}



/**
 * @member {module:model/Status} status
 */
DeliveryResult.prototype['status'] = undefined;

/**
 * @member {module:model/Channel} channel
 */
DeliveryResult.prototype['channel'] = undefined;

/**
 * Unique identifier for the message
 * @member {String} message_id
 */
DeliveryResult.prototype['message_id'] = undefined;

/**
 * Human-readable description of what went wrong, *null* in case of success or if the message has not been processed yet
 * @member {String} error
 */
DeliveryResult.prototype['error'] = undefined;

/**
 * @member {module:model/ErrorCodeOmnichannelMachine} err
 */
DeliveryResult.prototype['err'] = undefined;

/**
 * When this status was received by Omnichannel API
 * @member {Date} timestamp
 */
DeliveryResult.prototype['timestamp'] = undefined;

/**
 * @member {module:model/PriceInfo} price_info
 */
DeliveryResult.prototype['price_info'] = undefined;

/**
 * the sender of the message
 * @member {String} sender
 */
DeliveryResult.prototype['sender'] = undefined;






export default DeliveryResult;

