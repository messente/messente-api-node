/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactEnvelope from '../model/ContactEnvelope';
import ContactFields from '../model/ContactFields';
import ContactListEnvelope from '../model/ContactListEnvelope';
import ContactUpdateFields from '../model/ContactUpdateFields';
import ErrorPhonebook from '../model/ErrorPhonebook';
import GroupListEnvelope from '../model/GroupListEnvelope';

/**
* Contacts service.
* @module api/ContactsApi
* @version 2.1.0
*/
export default class ContactsApi {

    /**
    * Constructs a new ContactsApi. 
    * @alias module:api/ContactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addContactToGroup operation.
     * @callback module:api/ContactsApi~addContactToGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a contact to a group
     * @param {String} group_id String in UUID format
     * @param {String} phone A phone number
     * @param {module:api/ContactsApi~addContactToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addContactToGroup(group_id, phone, callback) {
      let postBody = null;
      // verify the required parameter 'group_id' is set
      if (group_id === undefined || group_id === null) {
        throw new Error("Missing the required parameter 'group_id' when calling addContactToGroup");
      }
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling addContactToGroup");
      }

      let pathParams = {
        'groupId': group_id,
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/phonebook/groups/{groupId}/contacts/{phone}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContact operation.
     * @callback module:api/ContactsApi~createContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new contact
     * @param {module:model/ContactFields} contact_fields 
     * @param {module:api/ContactsApi~createContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactEnvelope}
     */
    createContact(contact_fields, callback) {
      let postBody = contact_fields;
      // verify the required parameter 'contact_fields' is set
      if (contact_fields === undefined || contact_fields === null) {
        throw new Error("Missing the required parameter 'contact_fields' when calling createContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactEnvelope;
      return this.apiClient.callApi(
        '/phonebook/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContact operation.
     * @callback module:api/ContactsApi~deleteContactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a contact
     * @param {String} phone A phone number
     * @param {module:api/ContactsApi~deleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContact(phone, callback) {
      let postBody = null;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling deleteContact");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/phonebook/contacts/{phone}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchContact operation.
     * @callback module:api/ContactsApi~fetchContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a contact
     * @param {String} phone A phone number
     * @param {module:api/ContactsApi~fetchContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactEnvelope}
     */
    fetchContact(phone, callback) {
      let postBody = null;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling fetchContact");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactEnvelope;
      return this.apiClient.callApi(
        '/phonebook/contacts/{phone}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchContactGroups operation.
     * @callback module:api/ContactsApi~fetchContactGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupListEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists groups of a contact
     * @param {String} phone A phone number
     * @param {module:api/ContactsApi~fetchContactGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupListEnvelope}
     */
    fetchContactGroups(phone, callback) {
      let postBody = null;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling fetchContactGroups");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupListEnvelope;
      return this.apiClient.callApi(
        '/phonebook/contacts/{phone}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchContacts operation.
     * @callback module:api/ContactsApi~fetchContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactListEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all contacts
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [group_ids] Optional one or many group id strings in UUID format. For example: \"/contacts?groupIds=group_id_one&groupIds=group_id_two\" 
     * @param {module:api/ContactsApi~fetchContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactListEnvelope}
     */
    fetchContacts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupIds': this.apiClient.buildCollectionParam(opts['group_ids'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContactListEnvelope;
      return this.apiClient.callApi(
        '/phonebook/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContactFromGroup operation.
     * @callback module:api/ContactsApi~removeContactFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a contact from a group
     * @param {String} group_id String in UUID format
     * @param {String} phone A phone number
     * @param {module:api/ContactsApi~removeContactFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeContactFromGroup(group_id, phone, callback) {
      let postBody = null;
      // verify the required parameter 'group_id' is set
      if (group_id === undefined || group_id === null) {
        throw new Error("Missing the required parameter 'group_id' when calling removeContactFromGroup");
      }
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling removeContactFromGroup");
      }

      let pathParams = {
        'groupId': group_id,
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/phonebook/groups/{groupId}/contacts/{phone}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/ContactsApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactEnvelope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a contact
     * @param {String} phone A phone number
     * @param {module:model/ContactUpdateFields} contact_update_fields 
     * @param {module:api/ContactsApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactEnvelope}
     */
    updateContact(phone, contact_update_fields, callback) {
      let postBody = contact_update_fields;
      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling updateContact");
      }
      // verify the required parameter 'contact_update_fields' is set
      if (contact_update_fields === undefined || contact_update_fields === null) {
        throw new Error("Missing the required parameter 'contact_update_fields' when calling updateContact");
      }

      let pathParams = {
        'phone': phone
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContactEnvelope;
      return this.apiClient.callApi(
        '/phonebook/contacts/{phone}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
