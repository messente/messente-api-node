/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AnyJsonResponse', 'model/ErrorOmnichannel', 'model/WhatsappCreateTemplateRequest', 'model/WhatsappCreateTemplateResponse', 'model/WhatsappListTemplatesResponse', 'model/WhatsappTemplateCategory', 'model/WhatsappTemplateResponse', 'model/WhatsappTemplateStatus', 'model/WhatsappUpdateTemplateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AnyJsonResponse'), require('../model/ErrorOmnichannel'), require('../model/WhatsappCreateTemplateRequest'), require('../model/WhatsappCreateTemplateResponse'), require('../model/WhatsappListTemplatesResponse'), require('../model/WhatsappTemplateCategory'), require('../model/WhatsappTemplateResponse'), require('../model/WhatsappTemplateStatus'), require('../model/WhatsappUpdateTemplateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.MessenteApi) {
      root.MessenteApi = {};
    }
    root.MessenteApi.WhatsAppTemplatesApi = factory(root.MessenteApi.ApiClient, root.MessenteApi.AnyJsonResponse, root.MessenteApi.ErrorOmnichannel, root.MessenteApi.WhatsappCreateTemplateRequest, root.MessenteApi.WhatsappCreateTemplateResponse, root.MessenteApi.WhatsappListTemplatesResponse, root.MessenteApi.WhatsappTemplateCategory, root.MessenteApi.WhatsappTemplateResponse, root.MessenteApi.WhatsappTemplateStatus, root.MessenteApi.WhatsappUpdateTemplateRequest);
  }
}(this, function(ApiClient, AnyJsonResponse, ErrorOmnichannel, WhatsappCreateTemplateRequest, WhatsappCreateTemplateResponse, WhatsappListTemplatesResponse, WhatsappTemplateCategory, WhatsappTemplateResponse, WhatsappTemplateStatus, WhatsappUpdateTemplateRequest) {
  'use strict';

  /**
   * WhatsAppTemplates service.
   * @module api/WhatsAppTemplatesApi
   * @version 2.4.1
   */

  /**
   * Constructs a new WhatsAppTemplatesApi. 
   * @alias module:api/WhatsAppTemplatesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createWhatsappTemplate operation.
     * @callback module:api/WhatsAppTemplatesApi~createWhatsappTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhatsappCreateTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a WhatsApp template
     * @param {String} waba_id The ID of the WABA
     * @param {module:model/WhatsappCreateTemplateRequest} whatsapp_create_template_request The WhatsApp template to create
     * @param {module:api/WhatsAppTemplatesApi~createWhatsappTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhatsappCreateTemplateResponse}
     */
    this.createWhatsappTemplate = function(waba_id, whatsapp_create_template_request, callback) {
      var postBody = whatsapp_create_template_request;

      // verify the required parameter 'waba_id' is set
      if (waba_id === undefined || waba_id === null) {
        throw new Error("Missing the required parameter 'waba_id' when calling createWhatsappTemplate");
      }

      // verify the required parameter 'whatsapp_create_template_request' is set
      if (whatsapp_create_template_request === undefined || whatsapp_create_template_request === null) {
        throw new Error("Missing the required parameter 'whatsapp_create_template_request' when calling createWhatsappTemplate");
      }


      var pathParams = {
        'wabaId': waba_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WhatsappCreateTemplateResponse;

      return this.apiClient.callApi(
        '/whatsapp/wabas/{wabaId}/templates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWhatsappTemplate operation.
     * @callback module:api/WhatsAppTemplatesApi~deleteWhatsappTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a WhatsApp template
     * @param {String} waba_id The ID of the WABA
     * @param {String} name The name of the template to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.hsm_id The ID of the template to delete
     * @param {module:api/WhatsAppTemplatesApi~deleteWhatsappTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyJsonResponse}
     */
    this.deleteWhatsappTemplate = function(waba_id, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'waba_id' is set
      if (waba_id === undefined || waba_id === null) {
        throw new Error("Missing the required parameter 'waba_id' when calling deleteWhatsappTemplate");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteWhatsappTemplate");
      }


      var pathParams = {
        'wabaId': waba_id
      };
      var queryParams = {
        'name': name,
        'hsmId': opts['hsm_id'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AnyJsonResponse;

      return this.apiClient.callApi(
        '/whatsapp/wabas/{wabaId}/templates', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWhatsappTemplateById operation.
     * @callback module:api/WhatsAppTemplatesApi~getWhatsappTemplateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhatsappTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a WhatsApp template with the given ID
     * @param {String} waba_id The ID of the WABA
     * @param {String} template_id The ID of the template to retrieve
     * @param {module:api/WhatsAppTemplatesApi~getWhatsappTemplateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhatsappTemplateResponse}
     */
    this.getWhatsappTemplateById = function(waba_id, template_id, callback) {
      var postBody = null;

      // verify the required parameter 'waba_id' is set
      if (waba_id === undefined || waba_id === null) {
        throw new Error("Missing the required parameter 'waba_id' when calling getWhatsappTemplateById");
      }

      // verify the required parameter 'template_id' is set
      if (template_id === undefined || template_id === null) {
        throw new Error("Missing the required parameter 'template_id' when calling getWhatsappTemplateById");
      }


      var pathParams = {
        'wabaId': waba_id,
        'templateId': template_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WhatsappTemplateResponse;

      return this.apiClient.callApi(
        '/whatsapp/wabas/{wabaId}/templates/{templateId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listWhatsappTemplates operation.
     * @callback module:api/WhatsAppTemplatesApi~listWhatsappTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhatsappListTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests a list of WhatsApp templates
     * @param {String} waba_id The ID of the WABA
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (default to 25)
     * @param {String} opts.before A cursor point used for a paginated request to indicate the template to paginate backwards from.
     * @param {String} opts.after A cursor point used for a paginated request to indicate the template to paginate forwards from.
     * @param {module:model/WhatsappTemplateCategory} opts.category A filter for returning only templates matching a specific category.
     * @param {String} opts.content A search filter representing the content of a template. Only matching templates will be returned in the list.
     * @param {String} opts.language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) 
     * @param {String} opts.name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.
     * @param {module:model/WhatsappTemplateStatus} opts.status A filter for returning only templates matching a specific status.
     * @param {module:api/WhatsAppTemplatesApi~listWhatsappTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhatsappListTemplatesResponse}
     */
    this.listWhatsappTemplates = function(waba_id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'waba_id' is set
      if (waba_id === undefined || waba_id === null) {
        throw new Error("Missing the required parameter 'waba_id' when calling listWhatsappTemplates");
      }


      var pathParams = {
        'wabaId': waba_id
      };
      var queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'category': opts['category'],
        'content': opts['content'],
        'language': opts['language'],
        'name': opts['name'],
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WhatsappListTemplatesResponse;

      return this.apiClient.callApi(
        '/whatsapp/wabas/{wabaId}/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWhatsappTemplate operation.
     * @callback module:api/WhatsAppTemplatesApi~updateWhatsappTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnyJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a WhatsApp template
     * @param {String} waba_id The ID of the WABA
     * @param {String} template_id The ID of the template to update
     * @param {module:model/WhatsappUpdateTemplateRequest} whatsapp_update_template_request The template data to be updated
     * @param {module:api/WhatsAppTemplatesApi~updateWhatsappTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnyJsonResponse}
     */
    this.updateWhatsappTemplate = function(waba_id, template_id, whatsapp_update_template_request, callback) {
      var postBody = whatsapp_update_template_request;

      // verify the required parameter 'waba_id' is set
      if (waba_id === undefined || waba_id === null) {
        throw new Error("Missing the required parameter 'waba_id' when calling updateWhatsappTemplate");
      }

      // verify the required parameter 'template_id' is set
      if (template_id === undefined || template_id === null) {
        throw new Error("Missing the required parameter 'template_id' when calling updateWhatsappTemplate");
      }

      // verify the required parameter 'whatsapp_update_template_request' is set
      if (whatsapp_update_template_request === undefined || whatsapp_update_template_request === null) {
        throw new Error("Missing the required parameter 'whatsapp_update_template_request' when calling updateWhatsappTemplate");
      }


      var pathParams = {
        'wabaId': waba_id,
        'templateId': template_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnyJsonResponse;

      return this.apiClient.callApi(
        '/whatsapp/wabas/{wabaId}/templates/{templateId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
