/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MessenteApi) {
      root.MessenteApi = {};
    }
    root.MessenteApi.NumberVerificationApi = factory(root.MessenteApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * NumberVerification service.
   * @module api/NumberVerificationApi
   * @version 2.4.1
   */

  /**
   * Constructs a new NumberVerificationApi. 
   * @alias module:api/NumberVerificationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the verifyNumber operation.
     * @callback module:api/NumberVerificationApi~verifyNumberCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verify number
     * @param {String} username The API username
     * @param {String} password The API password
     * @param {String} to Receiver&#39;s phone number with the country code
     * @param {Object} opts Optional parameters
     * @param {String} opts.template Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;. 
     * @param {String} opts.pin_length Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.
     * @param {String} opts.from Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand.
     * @param {String} opts.max_tries Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.  
     * @param {String} opts.retry_delay For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.
     * @param {String} opts.validity For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).
     * @param {String} opts.ip IP address of the client making verification request.
     * @param {String} opts.browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;.
     * @param {String} opts.cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
     * @param {module:api/NumberVerificationApi~verifyNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.verifyNumber = function(username, password, to, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling verifyNumber");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling verifyNumber");
      }

      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling verifyNumber");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username,
        'password': password,
        'to': to,
        'template': opts['template'],
        'pin_length': opts['pin_length'],
        'from': opts['from'],
        'max_tries': opts['max_tries'],
        'retry_delay': opts['retry_delay'],
        'validity': opts['validity'],
        'ip': opts['ip'],
        'browser': opts['browser'],
        'cookie': opts['cookie'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiPassword', 'apiUsername'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/verify/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPin operation.
     * @callback module:api/NumberVerificationApi~verifyPinCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * verified the PIN code entered by the user.
     * @param {String} username The API username
     * @param {String} password The API password
     * @param {String} verification_id Verification ID returned by the successful verification request.
     * @param {String} pin PIN code entered by the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ip IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.
     * @param {String} opts.browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;.
     * @param {String} opts.cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
     * @param {module:api/NumberVerificationApi~verifyPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.verifyPin = function(username, password, verification_id, pin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling verifyPin");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling verifyPin");
      }

      // verify the required parameter 'verification_id' is set
      if (verification_id === undefined || verification_id === null) {
        throw new Error("Missing the required parameter 'verification_id' when calling verifyPin");
      }

      // verify the required parameter 'pin' is set
      if (pin === undefined || pin === null) {
        throw new Error("Missing the required parameter 'pin' when calling verifyPin");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username,
        'password': password,
        'verification_id': verification_id,
        'pin': pin,
        'ip': opts['ip'],
        'browser': opts['browser'],
        'cookie': opts['cookie'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiPassword', 'apiUsername'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/verify/pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
