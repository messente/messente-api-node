/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber and WhatsApp messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Price'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Price'));
  } else {
    // Browser globals (root is window)
    if (!root.MessenteApi) {
      root.MessenteApi = {};
    }
    root.MessenteApi.PricingApi = factory(root.MessenteApi.ApiClient, root.MessenteApi.Price);
  }
}(this, function(ApiClient, Price) {
  'use strict';

  /**
   * Pricing service.
   * @module api/PricingApi
   * @version 2.4.2
   */

  /**
   * Constructs a new PricingApi. 
   * @alias module:api/PricingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getPricelist operation.
     * @callback module:api/PricingApi~getPricelistCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pricelist for account
     * @param {String} username The API username
     * @param {String} password The API password
     * @param {module:api/PricingApi~getPricelistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getPricelist = function(username, password, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPricelist");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getPricelist");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username,
        'password': password,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiPassword', 'apiUsername'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/pricelist', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPrices operation.
     * @callback module:api/PricingApi~getPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Price} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pricing for a specific country
     * @param {String} username The API username
     * @param {String} password The API password
     * @param {String} country The country code, for which to get the prices
     * @param {Object} opts Optional parameters
     * @param {String} opts.format The format of the response. Can be either &#39;json&#39; or &#39;xml&#39;. If not specified, defaults to &#39;json&#39;.
     * @param {module:api/PricingApi~getPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Price}
     */
    this.getPrices = function(username, password, country, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPrices");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling getPrices");
      }

      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getPrices");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username,
        'password': password,
        'country': country,
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiPassword', 'apiUsername'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml', 'text/plain; charset=utf-8'];
      var returnType = Price;

      return this.apiClient.callApi(
        '/prices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
