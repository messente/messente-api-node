/**
 * Messente API
 * [Messente](https://messente.com) is a global provider of messaging and user verification services. Use Messente API library to send and receive SMS, Viber and WhatsApp messages, blacklist phone numbers to make sure you're not sending any unwanted messages, manage contacts and groups.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Channel from './model/Channel';
import ContactEnvelope from './model/ContactEnvelope';
import ContactFields from './model/ContactFields';
import ContactListEnvelope from './model/ContactListEnvelope';
import ContactUpdateFields from './model/ContactUpdateFields';
import DeliveryReportResponse from './model/DeliveryReportResponse';
import DeliveryResult from './model/DeliveryResult';
import EmptyObject from './model/EmptyObject';
import ErrorCodeOmnichannel from './model/ErrorCodeOmnichannel';
import ErrorCodeOmnichannelMachine from './model/ErrorCodeOmnichannelMachine';
import ErrorCodePhonebook from './model/ErrorCodePhonebook';
import ErrorItemOmnichannel from './model/ErrorItemOmnichannel';
import ErrorItemPhonebook from './model/ErrorItemPhonebook';
import ErrorOmnichannel from './model/ErrorOmnichannel';
import ErrorPhonebook from './model/ErrorPhonebook';
import ErrorTitleOmnichannel from './model/ErrorTitleOmnichannel';
import ErrorTitlePhonebook from './model/ErrorTitlePhonebook';
import FetchBlacklistSuccess from './model/FetchBlacklistSuccess';
import GroupEnvelope from './model/GroupEnvelope';
import GroupListEnvelope from './model/GroupListEnvelope';
import GroupName from './model/GroupName';
import GroupResponseFields from './model/GroupResponseFields';
import MessageResult from './model/MessageResult';
import NumberToBlacklist from './model/NumberToBlacklist';
import OmniMessageCreateSuccessResponse from './model/OmniMessageCreateSuccessResponse';
import Omnimessage from './model/Omnimessage';
import SMS from './model/SMS';
import Status from './model/Status';
import TextStore from './model/TextStore';
import Viber from './model/Viber';
import WhatsApp from './model/WhatsApp';
import WhatsAppAudio from './model/WhatsAppAudio';
import WhatsAppDocument from './model/WhatsAppDocument';
import WhatsAppImage from './model/WhatsAppImage';
import WhatsAppText from './model/WhatsAppText';
import BlacklistApi from './api/BlacklistApi';
import ContactsApi from './api/ContactsApi';
import DeliveryReportApi from './api/DeliveryReportApi';
import GroupsApi from './api/GroupsApi';
import OmnimessageApi from './api/OmnimessageApi';


/**
* Send and receive SMS, Viber and WhatsApp messages, blacklist phone numbers to make sure you&#39;re not sending any unwanted messages, manage contacts and groups..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MessenteApi = require('index'); // See note below*.
* var xxxSvc = new MessenteApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MessenteApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MessenteApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MessenteApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.3
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Channel model constructor.
     * @property {module:model/Channel}
     */
    Channel,

    /**
     * The ContactEnvelope model constructor.
     * @property {module:model/ContactEnvelope}
     */
    ContactEnvelope,

    /**
     * The ContactFields model constructor.
     * @property {module:model/ContactFields}
     */
    ContactFields,

    /**
     * The ContactListEnvelope model constructor.
     * @property {module:model/ContactListEnvelope}
     */
    ContactListEnvelope,

    /**
     * The ContactUpdateFields model constructor.
     * @property {module:model/ContactUpdateFields}
     */
    ContactUpdateFields,

    /**
     * The DeliveryReportResponse model constructor.
     * @property {module:model/DeliveryReportResponse}
     */
    DeliveryReportResponse,

    /**
     * The DeliveryResult model constructor.
     * @property {module:model/DeliveryResult}
     */
    DeliveryResult,

    /**
     * The EmptyObject model constructor.
     * @property {module:model/EmptyObject}
     */
    EmptyObject,

    /**
     * The ErrorCodeOmnichannel model constructor.
     * @property {module:model/ErrorCodeOmnichannel}
     */
    ErrorCodeOmnichannel,

    /**
     * The ErrorCodeOmnichannelMachine model constructor.
     * @property {module:model/ErrorCodeOmnichannelMachine}
     */
    ErrorCodeOmnichannelMachine,

    /**
     * The ErrorCodePhonebook model constructor.
     * @property {module:model/ErrorCodePhonebook}
     */
    ErrorCodePhonebook,

    /**
     * The ErrorItemOmnichannel model constructor.
     * @property {module:model/ErrorItemOmnichannel}
     */
    ErrorItemOmnichannel,

    /**
     * The ErrorItemPhonebook model constructor.
     * @property {module:model/ErrorItemPhonebook}
     */
    ErrorItemPhonebook,

    /**
     * The ErrorOmnichannel model constructor.
     * @property {module:model/ErrorOmnichannel}
     */
    ErrorOmnichannel,

    /**
     * The ErrorPhonebook model constructor.
     * @property {module:model/ErrorPhonebook}
     */
    ErrorPhonebook,

    /**
     * The ErrorTitleOmnichannel model constructor.
     * @property {module:model/ErrorTitleOmnichannel}
     */
    ErrorTitleOmnichannel,

    /**
     * The ErrorTitlePhonebook model constructor.
     * @property {module:model/ErrorTitlePhonebook}
     */
    ErrorTitlePhonebook,

    /**
     * The FetchBlacklistSuccess model constructor.
     * @property {module:model/FetchBlacklistSuccess}
     */
    FetchBlacklistSuccess,

    /**
     * The GroupEnvelope model constructor.
     * @property {module:model/GroupEnvelope}
     */
    GroupEnvelope,

    /**
     * The GroupListEnvelope model constructor.
     * @property {module:model/GroupListEnvelope}
     */
    GroupListEnvelope,

    /**
     * The GroupName model constructor.
     * @property {module:model/GroupName}
     */
    GroupName,

    /**
     * The GroupResponseFields model constructor.
     * @property {module:model/GroupResponseFields}
     */
    GroupResponseFields,

    /**
     * The MessageResult model constructor.
     * @property {module:model/MessageResult}
     */
    MessageResult,

    /**
     * The NumberToBlacklist model constructor.
     * @property {module:model/NumberToBlacklist}
     */
    NumberToBlacklist,

    /**
     * The OmniMessageCreateSuccessResponse model constructor.
     * @property {module:model/OmniMessageCreateSuccessResponse}
     */
    OmniMessageCreateSuccessResponse,

    /**
     * The Omnimessage model constructor.
     * @property {module:model/Omnimessage}
     */
    Omnimessage,

    /**
     * The SMS model constructor.
     * @property {module:model/SMS}
     */
    SMS,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The TextStore model constructor.
     * @property {module:model/TextStore}
     */
    TextStore,

    /**
     * The Viber model constructor.
     * @property {module:model/Viber}
     */
    Viber,

    /**
     * The WhatsApp model constructor.
     * @property {module:model/WhatsApp}
     */
    WhatsApp,

    /**
     * The WhatsAppAudio model constructor.
     * @property {module:model/WhatsAppAudio}
     */
    WhatsAppAudio,

    /**
     * The WhatsAppDocument model constructor.
     * @property {module:model/WhatsAppDocument}
     */
    WhatsAppDocument,

    /**
     * The WhatsAppImage model constructor.
     * @property {module:model/WhatsAppImage}
     */
    WhatsAppImage,

    /**
     * The WhatsAppText model constructor.
     * @property {module:model/WhatsAppText}
     */
    WhatsAppText,

    /**
    * The BlacklistApi service constructor.
    * @property {module:api/BlacklistApi}
    */
    BlacklistApi,

    /**
    * The ContactsApi service constructor.
    * @property {module:api/ContactsApi}
    */
    ContactsApi,

    /**
    * The DeliveryReportApi service constructor.
    * @property {module:api/DeliveryReportApi}
    */
    DeliveryReportApi,

    /**
    * The GroupsApi service constructor.
    * @property {module:api/GroupsApi}
    */
    GroupsApi,

    /**
    * The OmnimessageApi service constructor.
    * @property {module:api/OmnimessageApi}
    */
    OmnimessageApi
};
